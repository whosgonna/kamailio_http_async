#!KAMAILIO

loadmodule "pv"
loadmodule "tm"
loadmodule "http_async_client"
loadmodule "http_client"
loadmodule "xlog"
loadmodule "tmx"
loadmodule "sl"
loadmodule "textops"
loadmodule "cfgutils"
loadmodule "siputils"
loadmodule "rr"
loadmodule "ctl"

modparam("pv", "shvset", "http_async=i:1");
modparam("http_async_client", "workers", 1);
modparam("http_async_client", "connection_timeout", 1500)
#modparam("http_async_client", "curl_verbose", 1)


disable_sctp = yes
force_rport  = yes


request_route {
	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
            t_relay();
		}
        exit;
	}

    $var(sleep) = "1.00";
    $var(req)   = "http://www/sleep/" + $var(sleep);

    ## Create transaction before http_async_query;
    t_newtran();

    xinfo("Sending request [$var(req)] to sleep $var(sleep)ms\n");

    if ( $shv(http_async) == 0 ) {
        route(HTTP_REQUEST);
        exit;
    }

    route(HTTP_ASYNC_REQUEST);

    exit;
}


route[HTTP_REQUEST] {
    $var(result) = 0;
    http_client_query("$var(req)", "$var(result)");

    send_reply("404", "Not Found");
    exit;
}


route[HTTP_ASYNC_REQUEST] {
    if ( !http_async_query("$var(req)", "HTTP_REPLY") ) {
        xerr("http_async_query FAILED. Return is [$rc]\n");
    }

    send_reply("503", "Server Error");
    exit;
}


route[HTTP_REPLY] {
    if ( $http_ok ) {
        xinfo("HTTP reply ok\n");
    }
    else {
        xerr("Route[HTTP_REPLY]: error  $http_err)\n");
    }

    send_reply("404", "Not Found");
    exit;
}

